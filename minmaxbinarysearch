#!/usr/bin/env python3

import strict_binary_search
import loose_binary_search
import random

from generator import *
from printer import *

# Parameters controlling what exactly gets tested.
pagesize_candidates = [2, 10, 100, 1000]
truncation_lengths = [10, 5, 2]
execution_target_count = 100
verbose_execution_limit = 20
min_record_count = 10
max_record_count = 10000

given_names = ['Ada', 'Adalyn', 'Adalynn', 'Addison', 'Adelynn', 'Adriana',
               'Adrianna', 'Ainsley', 'Alaina', 'Alexa', 'Alexandra', 'Alexis', 'Alice',
               'Alicia', 'Alina', 'Allison', 'Allyson', 'Alondra', 'Amaya', 'Amelia', 'Amina',
               'Amira', 'Amiyah', 'Ana', 'Anaya', 'Andrea', 'Angel', 'Annabelle', 'Annalise',
               'Annie', 'Aria', 'Ariah', 'Ariana', 'Arianna', 'Ariel', 'Ariella', 'Arielle',
               'Arya', 'Ashlynn', 'Aspen', 'Athena', 'Aubree', 'Aubrey', 'Aurora', 'Averie',
               'Bianca', 'Blakely', 'Braelynn', 'Brianna', 'Brielle', 'Brooke', 'Brooklyn',
               'Brooklynn', 'Brynlee', 'Brynn', 'Camilla', 'Camille', 'Carly', 'Carolina',
               'Caroline', 'Cassidy', 'Catalina', 'Catherine', 'Charlee', 'Charlie', 'Chelsea',
               'Chloe', 'Christina', 'Dahlia', 'Dakota', 'Daniella', 'Danielle', 'Daphne',
               'Diana', 'Eleanor', 'Elise', 'Eliza', 'Elizabeth', 'Ember', 'Emerson', 'Emilia',
               'Erin', 'Esmeralda', 'Eva', 'Evangeline', 'Evelyn', 'Everly', 'Faith', 'Fatima',
               'Fiona', 'Francesca', 'Freya', 'Genevieve', 'Georgia', 'Gia', 'Gracelyn',
               'Gracelynn', 'Gracie', 'Gwendolyn', 'Hadley', 'Hailey', 'Haley', 'Harlow',
               'Haven', 'Heidi', 'Iris', 'Isabel', 'Ivy', 'Jacqueline', 'Jane', 'Jasmine',
               'Jayla', 'Jimena', 'Jocelyn', 'Journey', 'Joy', 'Juliet', 'Juliette', 'Juniper',
               'Kaia', 'Kaitlyn', 'Kamryn', 'Kate', 'Katelyn', 'Kayla', 'Kennedi', 'Khloe',
               'Kiara', 'Kinley', 'Kinsley', 'Kyla', 'Laila', 'Lana', 'Layla', 'Leia',
               'Leilani', 'Lena', 'Leslie', 'Lexi', 'Lila', 'Liliana', 'Lilly', 'Lily',
               'Lucia', 'Luna', 'Lyla', 'Maci', 'Madeline', 'Madelyn', 'Madilyn', 'Maeve',
               'Makenna', 'Malia', 'Maliyah', 'Mariah', 'Mariana', 'Marley', 'Mary',
               'Mckenzie', 'Melissa', 'Melody', 'Michelle', 'Mikayla', 'Mila', 'Millie',
               'Miracle', 'Miranda', 'Miriam', 'Morgan', 'Natalia', 'Natalie', 'Nicole',
               'Nina', 'Noelle', 'Nora', 'Norah', 'Nova', 'Nylah', 'Paige', 'Paisley', 'Paris',
               'Parker', 'Payton', 'Piper', 'Presley', 'Quinn', 'Rachel', 'Raelyn', 'Raelynn',
               'Reese', 'Remi', 'Riley', 'River', 'Rosalie', 'Rosemary', 'Ruby', 'Rylee',
               'Ryleigh', 'Sage', 'Samantha', 'Sara', 'Sarah', 'Saylor', 'Scarlet', 'Serenity',
               'Sienna', 'Sierra', 'Skye', 'Sloane', 'Sophia', 'Stephanie', 'Summer', 'Talia',
               'Taylor', 'Tessa', 'Valeria', 'Violet', 'Vivian', 'Zara']

family_names = ['Adkins', 'Aguilar', 'Alvarez', 'Anderson', 'Andrews',
                'Armstrong', 'Arnold', 'Austin', 'Baker', 'Baldwin', 'Ball', 'Barker', 'Barnes',
                'Barnett', 'Barrett', 'Barton', 'Bates', 'Bell', 'Benson', 'Berry', 'Bishop',
                'Blair', 'Boyd', 'Bradley', 'Brady', 'Brooks', 'Brown', 'Burgess', 'Burke',
                'Burns', 'Burton', 'Bush', 'Caldwell', 'Campbell', 'Campos', 'Carlson',
                'Carpenter', 'Carroll', 'Carter', 'Casey', 'Castro', 'Chambers', 'Chan',
                'Chandler', 'Chapman', 'Chen', 'Christensen', 'Cohen', 'Cole', 'Collins', 'Cox',
                'Crawford', 'Cross', 'Cruz', 'Cummings', 'Cunningham', 'Curry', 'Curtis',
                'Daniel', 'Davidson', 'Davis', 'Dawson', 'Day', 'Dean', 'Deleon', 'Delgado',
                'Dennis', 'Douglas', 'Doyle', 'Duncan', 'Edwards', 'Elliott', 'Erickson',
                'Espinoza', 'Evans', 'Ferguson', 'Fernandez', 'Fields', 'Figueroa', 'Fischer',
                'Fisher', 'Fitzgerald', 'Fleming', 'Flores', 'Foster', 'Fox', 'Francis',
                'Frazier', 'Gallagher', 'Garcia', 'Gardner', 'Garner', 'Garrett', 'Gibson',
                'Gilbert', 'Gomez', 'Gonzales', 'Gonzalez', 'Gordon', 'Graham', 'Grant', 'Gray',
                'Gregory', 'Griffin', 'Griffith', 'Hale', 'Hammond', 'Hansen', 'Hanson',
                'Hardy', 'Harper', 'Harrison', 'Hart', 'Hayes', 'Haynes', 'Henry', 'Hernandez',
                'Hicks', 'Hill', 'Hodges', 'Holland', 'Horton', 'Howard', 'Howell', 'Hudson',
                'Hughes', 'Hunt', 'Hunter', 'Jacobs', 'Jennings', 'Jordan', 'Joseph', 'Juarez',
                'Kelley', 'King', 'Klein', 'Knight', 'Larson', 'Lawrence', 'Le', 'Lee',
                'Leonard', 'Lewis', 'Little', 'Logan', 'Long', 'Lopez', 'Love', 'Lowe', 'Luna',
                'Lyons', 'Mack', 'Malone', 'Mann', 'Manning', 'Marquez', 'Marshall', 'Martinez',
                'Mason', 'Matthews', 'Maxwell', 'Mccoy', 'Mcdaniel', 'Mcdonald', 'Mcgee',
                'Mckinney', 'Mclaughlin', 'Mendoza', 'Miller', 'Miranda', 'Mitchell',
                'Montgomery', 'Moore', 'Morales', 'Moreno', 'Morris', 'Morrison', 'Mueller',
                'Mullins', 'Munoz', 'Murphy', 'Neal', 'Nelson', 'Nguyen', 'Norman', 'Norris',
                'Nunez', 'Oconnor', 'Oliver', 'Olson', 'Ortega', 'Osborne', 'Owens', 'Parks',
                'Parsons', 'Patel', 'Patton', 'Paul', 'Payne', 'Pearson', 'Perez', 'Perkins',
                'Phillips', 'Pierce', 'Potter', 'Powell', 'Quinn', 'Ramos', 'Ramsey', 'Ray',
                'Reeves', 'Reid', 'Reynolds', 'Riley', 'Rios', 'Rivera', 'Robbins', 'Robertson',
                'Rodgers', 'Rogers', 'Rojas', 'Romero', 'Russell', 'Ryan', 'Salazar', 'Santos',
                'Schmidt', 'Schwartz', 'Shelton', 'Sherman', 'Simmons', 'Simpson', 'Sims',
                'Singh', 'Snyder', 'Soto', 'Spencer', 'Stanley', 'Steele', 'Stephens',
                'Stevens', 'Stevenson', 'Stone', 'Strickland', 'Sutton', 'Tate', 'Terry',
                'Thompson', 'Tran', 'Turner', 'Valdez', 'Vaughn', 'Vazquez', 'Vega', 'Wade',
                'Wagner', 'Wallace', 'Walters', 'Warner', 'Washington', 'Watkins', 'Watson',
                'Watts', 'Webb', 'Weber', 'Webster', 'Welch', 'West', 'Wheeler', 'White',
                'Williams', 'Williamson', 'Willis', 'Wilson', 'Wise', 'Wolf', 'Wolfe', 'Wong',
                'Wood', 'Wright', 'Yang', 'Zimmerman']

truncation_specs = ['full'] + [ 'trunc_%d' % i for i in truncation_lengths ]

# Set up some global counters for averages.
total_step_count_strict = 0
total_step_count_loose = {}
total_number_of_matching_pages_strict = 0
total_number_of_matching_pages_loose = {}
total_pagecount = 0
execution_count = 0
for selector in truncation_specs:
    total_step_count_loose[selector] = 0
    total_number_of_matching_pages_loose[selector] = 0

print_table_header(truncation_specs)

# Execute a random search execution_target_count times.
for execution_count in range(0, execution_target_count + 1):
    # Pick random search parameters based on the parameters.
    needle = '%s, %s' % (random.choice(family_names),
                         random.choice(given_names))
    elem_count = random.randint(min_record_count, max_record_count)
    haystack = generate_haystack(given_names, family_names, elem_count)
    pagesize = random.choice(pagesize_candidates)
    pages = generate_pages(haystack, pagesize, truncation_lengths)
    total_pagecount += len(pages)

    # Set up vars for the results and do the actual search.
    (number_of_matching_pages_strict, step_count_strict) = strict_binary_search.filter_pages(pages, needle)
    total_number_of_matching_pages_strict += number_of_matching_pages_strict
    total_step_count_strict += step_count_strict

    number_of_matching_pages_loose = {}
    step_count_loose = {}
    for truncation in truncation_specs:
        (number_of_matching_pages_loose[truncation], step_count_loose[truncation]) = loose_binary_search.filter_pages(pages, needle, truncation)
        total_number_of_matching_pages_loose[truncation] += number_of_matching_pages_loose[truncation]
        total_step_count_loose[truncation] += step_count_loose[truncation]

    # Only print up to verbose_execution_limit results.
    if execution_count < verbose_execution_limit:
        print_padded_integer(execution_count)
        print_padded_integer(elem_count)
        print_padded_integer(pagesize)
        print_padded_integer(len(pages))
        print_padded_string('')

        print_padded_integer(step_count_strict)
        for selector in truncation_specs:
            print_padded_integer(step_count_loose[selector])

        print_padded_string('')

        print_padded_integer(number_of_matching_pages_strict)
        for selector in truncation_specs:
            print_padded_integer(number_of_matching_pages_loose[selector])

        print()

if verbose_execution_limit < execution_count:
    print('[%d executions omitted]' % (execution_count - verbose_execution_limit))

# Print averages.
print('-' * 10 * (8 + 2 * len(truncation_specs)))
print_padded_string('average')
print_padded_string('')
print_padded_string('')
print_padded_float(total_pagecount/execution_count)
print_padded_string('')

print_padded_float(total_step_count_strict/execution_count)
for selector in truncation_specs:
    print_padded_float(total_step_count_loose[selector]/execution_count)

print_padded_string('')

print_padded_float(total_number_of_matching_pages_strict/execution_count)
for selector in truncation_specs:
    print_padded_float(total_number_of_matching_pages_loose[selector]/execution_count)

print()
