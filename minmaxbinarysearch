#!/usr/bin/env python3

import strict_binary_search
import loose_binary_search
import random

def generate_haystack(haystack_candidates, elem_count):
    haystack = []
    for i in range(0, elem_count):
        haystack += [random.choice(haystack_candidates)]
    haystack.sort()
    return haystack

def generate_pages(data, pagesize, truncation_lengths):
    pages = []
    pagecount = 0
    trunc_len = 3
    for i in range(0, len(haystack), pagesize):
        page = {}
        page['id'] = pagecount
        pagecount += 1
        page['contents'] = haystack[i:i+pagesize]
        stats = {}
        stats['full'] = {}
        stats['full']['min'] = min(page['contents'])
        stats['full']['max'] = max(page['contents'])
        for trunc_len in truncation_lengths:
            truncation = 'truncated_to_%d' % trunc_len
            stats[truncation] = {}
            if len(stats['full']['min']) > trunc_len:
                stats[truncation]['min'] = stats['full']['min'][:trunc_len]
            else:
                stats[truncation]['min'] = stats['full']['min']

            if len(stats['full']['max']) > trunc_len:
                stats[truncation]['max'] = stats['full']['max'][:trunc_len - 1] + chr(ord(stats['full']['max'][trunc_len - 1]) + 1)
            else:
                stats[truncation]['max'] = stats['full']['max']
        page['stats'] = stats
        pages += [page]
    return pages

haystack_candidates = ['Amy', 'Bay', 'Ben', 'Dan', 'Eve', 'Gus', 'Ian', 'Ivy', 'Joy', 'Kim', 'Lee', 'Liz', 'Max', 'May', 'Ray', 'Sam', 'Ted', 'Tom', 'Uma']
needle_candidates_not_in_haystack = ['Ada', 'Bea', 'Eva', 'Fay', 'Ned']
pagesize_candidates = [2, 10, 100, 1000]
truncation_lengths = [3, 2, 1]

def pad_string(val):
   print('%10s' % val, end = '')

def pad_number(val):
   print('%10d' % val, end = '')

for search_for_existing_value in [True, False]:
    if search_for_existing_value:
        print('\nLooking for existing values:')
    else:
        print('\nLooking for non-existing values:')

    pad_string('elemcount')
    pad_string('pagesize')
    pad_string('pagecount')
    pad_string('')
    pad_string('steps')
    for i in truncation_lengths:
        pad_string('steps')
    print('%20s' % 'matches', end = '')
    for i in truncation_lengths:
        pad_string('matches')
    print()

    pad_string('')
    pad_string('')
    pad_string('')
    pad_string('')
    pad_string('(full)')
    for i in truncation_lengths:
        truncation = '(trunc%d)' % i
        pad_string(truncation)
    pad_string('')
    pad_string('(full)')
    for i in truncation_lengths:
        truncation = '(trunc%d)' % i
        pad_string(truncation)
    print()

    for i in range(0, 15):
        if search_for_existing_value:
            needle = random.choice(haystack_candidates)
        else:
            needle = random.choice(needle_candidates_not_in_haystack)
        elem_count = random.randint(10, 10000)
        haystack = generate_haystack(haystack_candidates, elem_count)
        pagesize = random.choice(pagesize_candidates)
        pages = generate_pages(haystack, pagesize, truncation_lengths)

        pad_number(elem_count)
        pad_number(pagesize)
        pad_number(len(pages))
        pad_string('')

        number_of_matching_pages = {}
        step_count = {}
        (number_of_matching_pages['full'], step_count['full']) = strict_binary_search.filter_pages(pages, needle)
        for i in truncation_lengths:
            truncation = 'truncated_to_%d' % i
            (number_of_matching_pages[truncation], step_count[truncation]) = loose_binary_search.filter_pages(pages, needle, i)

        pad_number(step_count['full'])
        for i in truncation_lengths:
            truncation = 'truncated_to_%d' % i
            pad_number(step_count[truncation])

        pad_string('')
        pad_number(number_of_matching_pages['full'])
        for i in truncation_lengths:
            truncation = 'truncated_to_%d' % i
            pad_number(number_of_matching_pages[truncation])

        print()
